% This function generates the module for the register of input data of the
% network
function RegData(riscv)
    file_name = 'CNN_Network/CNN/Reg_data.vhd';
    fid = fopen(file_name, 'w');   
    fprintf(fid, '--This module is necessary because the calculation of the first convolutional filter is parallelized and therefore we need to input signals from the memory,\n');
    fprintf(fid, '--this module manages the output of address to the memory and stores the signals coming from it until they can be processed by the system\n');
    fprintf(fid, 'library IEEE;\n');
    fprintf(fid, 'use IEEE.STD_LOGIC_1164.ALL;\n');
    fprintf(fid, 'use work.tfg_irene_package.ALL;\n');
    fprintf(fid, 'use IEEE.NUMERIC_STD.ALL;\n\n');   
    fprintf(fid, 'entity Reg_data is\n');
    fprintf(fid, '    Port ( \n');
    fprintf(fid, '        clk : in std_logic;\n');
    fprintf(fid, '        rst : in std_logic;\n');
    fprintf(fid, '        data_addr : in std_logic;\n');
    fprintf(fid, '        data_red : in std_logic;\n');
    fprintf(fid, '        address_in : in vector_address(0 to parallel_data - 1);\n');
    fprintf(fid, '        address_out : out std_logic_vector(log2c(number_of_inputs) - 1 downto 0);\n');
    if(riscv == 0)
        fprintf(fid, '        data_in : in std_logic_vector(input_sizeL1 - 1 downto 0);\n');
        fprintf(fid, '        data_out : out vector_data_in(0 to parallel_data - 1));\n');
        fprintf(fid, 'end Reg_data;\n');
        fprintf(fid, 'architecture Behavioral of Reg_data is\n');
        fprintf(fid, '    signal data_reg, data_next :  vector_data_in(0 to parallel_data - 1);\n');
        fprintf(fid, '    signal data_red_reg, data_red_next : vector_data_in(0 to parallel_data - 1) := (others => (others => ''0''));\n');
        fprintf(fid, '    signal address_reg, address_next :  std_logic_vector(log2c(number_of_inputs) - 1 downto 0) := (others => ''0'');\n');
        fprintf(fid, '    signal c_reg, c_next, c2_reg, c2_next : unsigned(0 downto 0) := "0";\n');
        fprintf(fid, 'begin\n\n');
        fprintf(fid, '--Register\n');
        fprintf(fid, '    process(clk)\n');
        fprintf(fid, '    begin\n');
        fprintf(fid, '    if (clk''event and clk = ''1'') then\n');
        fprintf(fid, '        if (rst = ''0'') then\n');
        fprintf(fid, '            for i in 0 to parallel_data - 1 loop\n');
        fprintf(fid, '                data_reg(i) <= (others => ''0'');\n');
        fprintf(fid, '            end loop;\n');
        fprintf(fid, '            address_reg <= (others => ''0'');\n');
        fprintf(fid, '            c_reg <= "0";\n');
        fprintf(fid, '            c2_reg <= "0";\n');
        fprintf(fid, '        else\n');
        fprintf(fid, '            c_reg <= c_next;\n');
        fprintf(fid, '            c2_reg <= c2_next;\n');
        fprintf(fid, '            address_reg <= address_next;\n');
        fprintf(fid, '            data_reg <= data_next;\n');
        fprintf(fid, '        end if;\n');
        fprintf(fid, ' end if;\n');
        fprintf(fid, 'end process;\n');
        fprintf(fid, '--Next state logic\n');
        fprintf(fid, '    process(data_red, c_reg, c2_reg, data_addr, data_in, address_in, address_reg, data_reg)\n');
        fprintf(fid, '    begin\n');
        fprintf(fid, '        for i in 0 to parallel_data - 1 loop\n');
        fprintf(fid, '            -- when each of the control signals (data_red for data and data_addr for addresses) is activated, we change the value of the index to process the data in order\n');
        fprintf(fid, '            if data_red = ''1'' then\n');
        fprintf(fid, '                c_next <= "1";\n');
        fprintf(fid, '            else\n');
        fprintf(fid, '                c_next <= "0";\n');
        fprintf(fid, '            end if;\n');
        fprintf(fid, '            if data_addr = ''1'' then\n');
        fprintf(fid, '                c2_next <= "1";\n');
        fprintf(fid, '            else\n');
        fprintf(fid, '                c2_next <= "0";\n');
        fprintf(fid, '            end if;\n');
        fprintf(fid, '    if (i = c_reg) then\n');
        fprintf(fid, '        data_next(to_integer(c_reg)) <= data_in;\n');
        fprintf(fid, '    else\n');
        fprintf(fid, '        data_next(i) <= data_reg(i);\n');
        fprintf(fid, '    end if;\n');
        fprintf(fid, '            address_next <= address_in(to_integer(c2_reg));\n');
        fprintf(fid, '        end loop;\n');
        fprintf(fid, '    end process;\n\n');
        fprintf(fid, '--Output logic\n');
        fprintf(fid, '    data_out <= data_reg;\n');
        fprintf(fid, '    address_out <= address_reg;\n\n');
        fprintf(fid, 'end Behavioral;\n');
    else
       fprintf(fid, '        data_in : in STD_LOGIC_VECTOR(31 downto 0);\n');
       fprintf(fid, '        data_out : out vector_data_in(0 to parallel_data - 1)\n');
       fprintf(fid, '    );\n');
       fprintf(fid, 'end Reg_data;\n');
       fprintf(fid, '\n');
       fprintf(fid, 'architecture Behavioral of Reg_data is\n');
       fprintf(fid, '    signal data_reg, data_next : STD_LOGIC_VECTOR(input_sizeL1 - 1 downto 0);\n');
       fprintf(fid, '    signal data_in_red, dato_in : STD_LOGIC_VECTOR(input_sizeL1 - 1 downto 0);\n');
       fprintf(fid, '    signal data_red_reg, data_red_next : vector_data_in(0 to parallel_data - 1) := (others => (others => ''0''));\n');
       fprintf(fid, '    signal address_reg, address_next : std_logic_vector(log2c(number_of_inputs) - 1 downto 0) := (others => ''0'');\n');
       fprintf(fid, '    signal address_byte : std_logic_vector(1 downto 0);\n');
       fprintf(fid, '    signal c_reg, c_next, c2_reg, c2_next : unsigned(0 downto 0) := "0";\n');
       fprintf(fid, 'begin\n');
       fprintf(fid, '    -- Register\n');
       fprintf(fid, '    process(clk)\n');
       fprintf(fid, '    begin\n');
       fprintf(fid, '        if (clk''event and clk = ''1'') then\n');
       fprintf(fid, '            if (rst = ''0'') then\n');
       fprintf(fid, '                for i in 0 to parallel_data - 1 loop\n');
       fprintf(fid, '                    data_red_reg(i) <= (others => ''0'');\n');
       fprintf(fid, '                end loop;\n');
       fprintf(fid, '                address_reg <= (others => ''0'');\n');
       fprintf(fid, '                c_reg <= "0";\n');
       fprintf(fid, '                c2_reg <= "0";\n');
       fprintf(fid, '                data_reg <= (others => ''0'');\n');
       fprintf(fid, '            else\n');
       fprintf(fid, '                c_reg <= c_next;\n');
       fprintf(fid, '                c2_reg <= c2_next;\n');
       fprintf(fid, '                address_reg <= address_next;\n');
       fprintf(fid, '                data_red_reg <= data_red_next;\n');
       fprintf(fid, '                data_reg <= data_next;\n');
       fprintf(fid, '            end if;\n');
       fprintf(fid, '        end if;\n');
       fprintf(fid, '    end process;\n');
       fprintf(fid, '\n');
       fprintf(fid, '    -- Next state logic\n');
       fprintf(fid, ' process(data_in_red, address_byte, address_reg, data_in)\n');
       fprintf(fid, '    begin\n');
       fprintf(fid, '        address_byte <= address_reg(1 downto 0);\n');
       fprintf(fid, '        if (address_byte = "00") then\n');
       fprintf(fid, '            data_in_red <= data_in(7 downto 0);\n');
       fprintf(fid, '        elsif (address_byte = "01") then\n');
       fprintf(fid, '            data_in_red <= data_in(15 downto 8);\n');
       fprintf(fid, '        elsif (address_byte = "10") then\n');
       fprintf(fid, '            data_in_red <= data_in(23 downto 16);\n');
       fprintf(fid, '        else\n');
       fprintf(fid, '            data_in_red <= data_in(31 downto 24);\n');
       fprintf(fid, '        end if;\n');
       fprintf(fid, '    end process;\n');
       fprintf(fid, '\n');
       fprintf(fid, '    process(data_red, c_reg, c2_reg, data_addr, address_in, address_reg, data_red_reg, data_in_red)\n');
       fprintf(fid, '    begin\n');
       fprintf(fid, '        for i in 0 to parallel_data - 1 loop\n');
       fprintf(fid, '            if (data_red = ''1'') then\n');
       fprintf(fid, '                c_next <= "1";\n');
       fprintf(fid, '            else\n');
       fprintf(fid, '                c_next <= "0";\n');
       fprintf(fid, '            end if;\n');
       fprintf(fid, '            if (data_addr = ''1'') then\n');
       fprintf(fid, '                c2_next <= "1";\n');
       fprintf(fid, '            else\n');
       fprintf(fid, '                c2_next <= "0";\n');
       fprintf(fid, '            end if;\n');
       fprintf(fid, '            address_next <= address_in(to_integer(c2_reg));\n');
       fprintf(fid, '            if (i = c_reg) then\n');
       fprintf(fid, '                data_red_next(to_integer(c_reg)) <= data_in_red;\n');
       fprintf(fid, '            else\n');
       fprintf(fid, '                data_red_next(i) <= data_red_reg(i);\n');
       fprintf(fid, '            end if;\n');
       fprintf(fid, '        end loop;\n');
       fprintf(fid, '    end process;\n');
       fprintf(fid, '\n');
       fprintf(fid, '    data_next <= data_in_red;\n');
       fprintf(fid, '\n');
       fprintf(fid, '    -- Output logic\n');
       fprintf(fid, '    data_out <= data_red_reg;\n');
       fprintf(fid, '    address_out <= address_reg;\n');
       fprintf(fid, '\n');
       fprintf(fid, 'end Behavioral;\n');
 
    end
    fclose(fid);